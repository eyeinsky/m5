{-# LANGUAGE StandaloneDeriving #-}
module M5.CmdArgs where

import Prelude ()
import Prelude2

import qualified Data.Text    as T
import qualified Data.Text.IO as TIO
import qualified Data.HashMap.Lazy as HM
import Data.Either (either)

import Control.Applicative ((*>),(<*))
import Control.Monad.Trans
import Control.Monad.Either

import Text.Parsec hiding ((<|>))

import qualified System.Console.CmdArgs as C
import           System.Console.CmdArgs ((&=))
import qualified System.Environment as E

import M5.Helpers
import M5.Types
import M5.Parse


-- * Argument parsing

data Args = Args
   { dbg    :: Bool     -- debug
   , overwrite :: Bool  -- force owerwriting of files
   , oo     :: [String]
   , ii     :: [String]
   } deriving (C.Typeable, C.Data, Show)


myargs = Args
   { dbg       = False              
               &= C.help "print debug info to stdout"
   , overwrite = False &= C.name "f"
               &= C.help "owerwrite existing files"
   , oo        = C.def             
               &= C.help "map streams to files or stdout"
   , ii        = C.def &= C.args &= C.typFile
   } &= C.program "m5"
     &= C.summary "m5 v0.1"

cmdArgs = C.cmdArgs myargs

cfg = ParserConf "=" "=>" "\\"

cmdArgs' = do -- in EitherT:
   args@ (Args dbg ovr strOuts strIns) <- lift $ C.cmdArgs myargs
   inText <- lift $ getConcatIns strIns
   -- sw "Input: " inText

   outDirs <- f "out directions" $ parseSinks cfg strOuts
   -- sw "Calculated out streams: " outDirs
   -- Output outHM <- f "input contents" $ expandInput inText
   {-

   mapM_ (sw "Outstream: ") $ HM.toList outHM

   putOuts ovr outHM outDirs
   -}
   u
   where f x = either (left . (("Parse error in " <> x) <>) . tshow) return




-- * Stream direction

-- | A list of sources, where source is either stdin or file
data Input
   = StdIn
   | File FilePath
   deriving (Show)

instance Default [Input] where def = [StdIn]


-- | Parses input specifiers, and gets their contents as a single text.
getConcatIns []  = TIO.getContents
getConcatIns ins = T.concat <$> mapM (read . parse) ins
   where
      read input = case input of StdIn -> TIO.getContents; File path -> TIO.readFile path
      parse "-" = StdIn
      parse path = File path


-- | A map from stream name to an out-stream (bash) or to file. If
-- only one stream was defined in input, then having a sink is
-- enough -- everythint is put there.
newtype Out = Out OutR deriving (Show, Monoid)
type OutR = [OutPair]
type OutPair = ((Name, Sink) :| Sink)
type Sink = () :| FilePath

getSinkFilePath :: OutPair -> Maybe FilePath
getSinkFilePath (Left (name, Right fp)) = Just fp
getSinkFilePath (Right (Right fp)) = Just fp

-- | Standard out is the default output map.
instance Default Out where def = Out [( Right $ Left () )]

-- | Parses command line mapping arguments to output mappings.

{- TODO: ParserConf not used in parsing commandline, using it 
         only to reuse the content parsers. Should I get rid of
         this dependency? -}

parseSinks :: ParserConf -> [String] -> Either ParseError OutR
parseSinks cfg [] = Right [( Right $ Left () )]
parseSinks cfg xs = mapM parseOut xs
   where
      parseOut = myparse cfg outParser
      outParser = ((,) <$> word <* gt <*> sink) <:|> sink
      gt = spacesP *> char '>'
      sink = spacesP *> sink'
      sink' = (Left  <$> (oneOf "-0" *> return ()) <* eof)
         <|>  (Right <$> many anyChar)

-- verifySinks ovr 
